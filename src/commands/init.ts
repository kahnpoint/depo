import { run } from "../utils/utils.ts";
import { DEPO_JSON } from "../meta/depo.json.ts";
import { DENO_JSON } from "../meta/deno.json.ts";
import {existsSync} from "fs";

// print the depo, esm, and deno versions
export function printIntroHeader() {
  console.log(
    `%cüöö Depo %c${DEPO_JSON.depo.version} - %c‚òÅÔ∏è  ESM %c${DEPO_JSON.esm.version} - %cü¶ï Deno %cv${Deno.version.deno}`,
    "color: blue; font-weight: bold",
    "color: white",
    "color: orange; font-weight: bold",
    "color: white",
    "color: green; font-weight: bold",
    "color: white",
  );
}

export async function initRepo(
  repoName: string | null = null,
  approveAll: boolean | undefined = false,
) {
  // set default values
  approveAll = approveAll ?? false;

  // print the depo, esm, and deno versions
  printIntroHeader();

  // create new repo if a name is provided
  try {
    if (repoName != null) {
      DEPO_JSON.module.name = repoName;
      Deno.mkdirSync(repoName, {});
      Deno.chdir(repoName);
    }
  } catch (e) {
    console.log(`%cFolder "${repoName}" already exists`, `color: orange`);
  }

  // create src folder if it doesn't exist
  try {
    Deno.mkdirSync("src", {});
  } catch (e) {
    console.log(`%cFolder "src" already exists`, `color: orange`);
    null;
  }

  // create deno.json if it doesn't exist
  try {
    Deno.writeTextFileSync("deno.json", JSON.stringify(DENO_JSON, null, 2), {
      createNew: true,
    });
  } catch (e) {
    console.log(`%cdeno.json already exists`, `color: orange`);
  }

  // create deps.ts
  // const DEPS_TS = `// This file is auto-generated by Depo`
  // Deno.writeTextFileSync('src/deps.ts', DEPS_TS);

  // create mod.ts if it doesn't exist
  const MOD_TS = `export function add(a: number, b: number): number {
    return a + b;
}
    
// Learn more at https://deno.land/manual/examples/module_metadata#concepts
if (import.meta.mod) {
    console.log("Add 2 + 3 =", add(2, 3));
}`;
  try {
    Deno.writeTextFileSync("src/mod.ts", MOD_TS, { createNew: true });
  } catch (e) {
    console.log(`%csrc/mod.ts already exists`, `color: orange`);
  }

  // create mod_test.ts if it doesn't exist
  const MOD_TEST_TS =
    `import { assertEquals } from "https://deno.land/std@0.210.0/assert/mod.ts";
import { add } from "./mod.ts";
    
Deno.test(function addTest() {
    assertEquals(add(2, 3), 5);
});`;

  try {
    Deno.writeTextFileSync("src/mod_test.ts", MOD_TEST_TS, {
      createNew: true,
    });
  } catch (e) {
    console.log(`%csrc/mod_test.ts already exists`, `color: orange`);
  }

  // create new depo.json if it doesn't exist
  try {
    Deno.writeTextFileSync("depo.json", JSON.stringify(DEPO_JSON, null, 2), {
      createNew: true,
    });
  } catch (e) {
    console.log(`%cdepo.json already exists`, `color: orange`);
  }
  
  // create readme.md if it doesn't exist
  try{
    const README = `# ${repoName ?? Deno.cwd().split("/").pop() ?? "My Repo"}`;
    Deno.writeTextFileSync("readme.md", README, { createNew: true });
    }
    catch (e) {
      console.log(`%creadme.md already exists`, `color: orange`);
    }
    

  // optionally initialize git repo
  if (!existsSync(".git") && (approveAll || confirm("Initialize Git repo?"))) {
    await run("git", { args: ["init"], error: false });
    try{
      const GITIGNORE = ``;
      Deno.writeTextFileSync(".gitignore", GITIGNORE, { createNew: true });
      console.log("‚úÖ Git repo initialized");
    } catch (e) {
      console.log(`%c.gitignore already exists`, `color: orange`);
      
    }  
    
  }

  // optionally create vs code folder
  if (approveAll || confirm("Create .vscode folder?")) {
    try {
      Deno.mkdirSync(".vscode");
      const VSCODE_SETTINGS = {
        "deno.enable": true,
        "deno.lint": true,
        "deno.unstable": true,
      };
      Deno.writeTextFileSync(
        ".vscode/settings.json",
        JSON.stringify(VSCODE_SETTINGS, null, 2),
        { createNew: true },
      );

      console.log("‚úÖ .vscode folder created");
    } catch (e) {
      console.log(`%c.vscode folder already exists`, `color: orange`);
    }
  }
}
