import { sources } from "../sources/sources.ts";
import { DEPO_JSON } from "../depo.json.ts";
import { run } from "../utils/utils.ts";

const unstableDenoStd = new Set([
    "archive",
    "console",
    "datetime",
    "dotenv",
    "encoding",
    "flags",
    "front_matter",
    "html",
    "http",
    "log",
    "msgpack",
    "path",
    "regexp",
    "semver",
    "streams",
    "ulid",
    "url",
    "webgpu"
]);

const stableDenoStd = new Set([
    "assert",
    "async",
    "bytes",
    "collections",
    "csv",
    "fmt",
    "fs",
    "json",
    "jsonc",
    "media_types",
    "testing",
    "toml",
    "uuid",
    "yaml"
]);


function buildQueryParameters(flags: Record<string, any>){
    let query = "?";
    for (const key in flags) {
        const value = flags[key];
        if (value === true){
        query += `${key}&`;
        }else if (typeof value === "string" && key !== "as"){
        query += `${key}=${value}&`;
        }
       
    }
    return query.slice(0, -1);
}


export function install(source : string, pkg : string, flags : Record<string, any>){
    
    console.log("installing", source, pkg, flags);
    
    let denoJson = JSON.parse(Deno.readTextFileSync("deno.json"));
    
    // use an alias if specified
    let aliasedPkg = flags.as ?? pkg;
    
    // only take before the @, ignoring an @ if it starts with it
    // like worst case scenario:
    // @babel/core@^5.0.0
    if (aliasedPkg.startsWith("@")){
        aliasedPkg = aliasedPkg.slice(0, aliasedPkg.indexOf("@", 1)).slice(1);
    } else if (aliasedPkg.includes("@")){
        aliasedPkg = aliasedPkg.slice(0, aliasedPkg.indexOf("@", 0));
    }
    
    // check if a standard library package is being installed
    if (unstableDenoStd.has(aliasedPkg) || stableDenoStd.has(aliasedPkg)){
        denoJson["imports"][aliasedPkg] = `https://deno.land/std@${DEPO_JSON.std.version}/${aliasedPkg}/mod.ts` + buildQueryParameters(flags);
        Deno.writeTextFileSync("deno.json", JSON.stringify(denoJson, null, 2));
        
    } else {
        switch (source) {
            case "node": {
                denoJson["imports"][aliasedPkg] = `https://esm.sh/${DEPO_JSON.esm.version}/${pkg}` + buildQueryParameters(flags);
                Deno.writeTextFileSync("deno.json", JSON.stringify(denoJson, null, 2));
                break;
            }
            case "github": {
                aliasedPkg = aliasedPkg.split("/")[1];            
                denoJson["imports"][aliasedPkg] = `https://esm.sh/gh/${pkg}` + buildQueryParameters(flags);
                Deno.writeTextFileSync("deno.json", JSON.stringify(denoJson, null, 2));
                break;
            }
            default: { // deno            
                if (aliasedPkg.includes("/")){
                    aliasedPkg = aliasedPkg.slice(0, aliasedPkg.indexOf("/"));
                }
                
                denoJson["imports"][aliasedPkg] = `https://deno.land/x/${pkg}` + buildQueryParameters(flags);
                Deno.writeTextFileSync("deno.json", JSON.stringify(denoJson, null, 2));
                break;
                    
            }
        }
    }
    
    let DEPS_JSON = ["// This file is auto-generated by Depo", ""];
    let exports = [];
    
    for (const [key, value] of Object.entries(denoJson["imports"])) {
        if (key === "deps"){
            continue;
        }
        const modifiedKey = key.replaceAll("/", "__").replaceAll("-", "_").replaceAll("@", "");
        console.log(modifiedKey, value);
        DEPS_JSON.push(`import * as ${modifiedKey} from "${value}";`);
        exports.push(`${modifiedKey}`);
    }
    
    DEPS_JSON.push("")
    DEPS_JSON.push(`export { ${exports.join(", ")} };`);
    
    Deno.writeTextFileSync("src/deps.ts", DEPS_JSON.join("\n"));
    
    run("deno", {args: ["cache", "src/deps.ts"]});
    
}

// const flags = {
//     _: [ "test" ],
//     "bundle-deps": true,
//     alias: "hello",
//     module: true,
//     help: false,
//     "no-bundle": false,
//     dev: false,
//     "keep-names": false,
//     "ignore-annotations": false,
//     worker: false,
//     raw: false,
//     "no-dts": false,
//     y: false,
//     yes: false
//   }

// install("node", "react", flags)