import { run } from "../utils/utils.ts";
import { DEPO_JSON } from "../depo.json.ts";
import { Command } from "cliffy-command";
import { DENO_JSON } from "../deno.json.ts";

export const initCommand = new Command()
  .description("Initialize repo with depo.")
  .arguments("[name:string]")
  .option("-y, --yes", "Approve all prompts")
  .action(async (options, name, ...args) => {
    await initRepo(name, options.yes);
  });

async function initRepo(
  repoName: string | null = null,
  approveAll: boolean | undefined = false,
) {
  // set default values
  approveAll = approveAll ?? false;

  // intro header
  console.log(
    `%cðŸ¦• Deno %c${Deno.version.deno} %cðŸšš Depo %c${DEPO_JSON.depo.version}`,
    "color: green; font-weight: bold",
    "color: white",
    "color: blue; font-weight: bold",
    "color: white",
  );

  // create new repo if a name is provided
  try {
    if (repoName != null) {
      Deno.mkdirSync(repoName, {});
      Deno.chdir(repoName);
    }
  } catch (e) {
    console.log(`%cFolder "${repoName}" already exists`, `color: orange`);
  }

  // create src folder if it doesn't exist
  try {
    Deno.mkdirSync("src", {});
  } catch (e) {
    console.log(`%cFolder "src" already exists`, `color: orange`);
    null;
  }

  // create deno.json if it doesn't exist
  try {
    Deno.writeTextFileSync("deno.json", JSON.stringify(DENO_JSON, null, 2), {
      createNew: true,
    });
  } catch (e) {
    console.log(`%cdeno.json already exists`, `color: orange`);
  }

  // create deps.ts
  // const DEPS_TS = `// This file is auto-generated by Depo`
  // Deno.writeTextFileSync('src/deps.ts', DEPS_TS);

  // create main.ts if it doesn't exist
  const MAIN_TS = `export function add(a: number, b: number): number {
    return a + b;
}
    
// Learn more at https://deno.land/manual/examples/module_metadata#concepts
if (import.meta.main) {
    console.log("Add 2 + 3 =", add(2, 3));
}`;
  try {
    Deno.writeTextFileSync("src/main.ts", MAIN_TS, { createNew: true });
  } catch (e) {
    console.log(`%csrc/main.ts already exists`, `color: orange`);
  }

  // create main_test.ts if it doesn't exist
  const MAIN_TEST_TS =
    `import { assertEquals } from "https://deno.land/std@0.210.0/assert/mod.ts";
import { add } from "./main.ts";
    
Deno.test(function addTest() {
    assertEquals(add(2, 3), 5);
});`;
  
  try {
    Deno.writeTextFileSync("src/main_test.ts", MAIN_TEST_TS, {
      createNew: true,
    });
  } catch (e) {
    console.log(`%csrc/main_test.ts already exists`, `color: orange`);
  }

  // create new depo.json if it doesn't exist
  try {
    Deno.writeTextFileSync("depo.json", JSON.stringify(DEPO_JSON, null, 2), {
      createNew: true,
    });
  } catch (e) {
    console.log(`%cdepo.json already exists`, `color: orange`);
  }  

  // optionally initialize git repo
  if (approveAll || confirm("Initialize Git repo?")) {
    await run("git", { args: ["init"], error: false });

    const GITIGNORE = ``;
    Deno.writeTextFileSync(".gitignore", GITIGNORE, { createNew: true });

    const README = `# ${repoName ?? Deno.cwd().split("/").pop() ?? "My Repo"}`;
    Deno.writeTextFileSync("readme.md", README, { createNew: true });

    console.log("âœ… Git repo initialized");
  }

  // optionally create vs code folder
  if (approveAll || confirm("Create .vscode folder?")) {
    try{
      Deno.mkdirSync(".vscode");
      const VSCODE_SETTINGS = {
        "deno.enable": true,
        "deno.lint": true,
        "deno.unstable": true,
      };
      Deno.writeTextFileSync(
        ".vscode/settings.json",
        JSON.stringify(VSCODE_SETTINGS, null, 2),
        { createNew: true },
      );

      console.log("âœ… .vscode folder created");
      } catch (e) {
        console.log(`%c.vscode folder already exists`, `color: orange`);
      }
  }
}
